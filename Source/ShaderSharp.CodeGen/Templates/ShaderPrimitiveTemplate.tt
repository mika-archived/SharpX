﻿<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// <auto-generated />

using ShaderSharp.Compiler.Abstractions.Attributes;
using ShaderSharp.Library.Primitives.Abstractions;
using ShaderSharp.Library.Primitives.Interfaces;

namespace ShaderSharp.Library.Primitives
{
    [Component("<#= ComponentName #>")]
    [External]
    public partial class <#= ClassName #> : <#= Inheritance #>
    {
        public <#= ClassName #>(<#= CSharpPrimitive #> _) {}

<# if (IsVector()) { #>
<# if (Template == "1") { #>
        public static implicit operator <#= CSharpPrimitive #>(<#= ClassName #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassName #>(<#= CSharpPrimitive #> _)
        {
            return default;
        }

<# if (CSharpPrimitive != "bool") { #>
        public static implicit operator bool(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

        public static bool operator true(<#= ClassName #> _)
        {
            return default;
        }

        public static bool operator false(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

<# var targets = new string[] { ClassName, "int", "float" }; #>
<# foreach (var target in targets ) { #>
        public static <#= ClassName #> operator +(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator -(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator *(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator /(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator %(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }
<# } #>

<# } #>
    }
}