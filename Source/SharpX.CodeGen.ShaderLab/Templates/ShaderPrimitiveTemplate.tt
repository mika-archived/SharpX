﻿<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// <auto-generated />

using SharpX.Library.ShaderLab.Attributes;
using SharpX.Library.ShaderLab.Primitives.Abstractions;

namespace SharpX.Library.ShaderLab.Primitives
{
    [Component("<#= ComponentName #>")]
    [External]
    public partial class <#= ClassName #> <#= string.IsNullOrWhiteSpace(Inheritance) ? "" : (": " + Inheritance) #>
    {
<# if (IsVector()) { #>
<# if (Template == "1") { #>
        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a) {}

        public static implicit operator <#= CSharpPrimitive #>(<#= ClassName #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassName #>(<#= CSharpPrimitive #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassName #>2(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassName #>3(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassName #>4(<#= ClassName #> _)
        {
            return default;
        }

<# if (CSharpPrimitive != "bool") { #>
        public static implicit operator bool(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

        public static bool operator true(<#= ClassName #> _)
        {
            return default;
        }

        public static bool operator false(<#= ClassName #> _)
        {
            return default;
        }
<# } #>
<# if (Template == "2") { #>

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>3(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>4(<#= ClassName #> _)
        {
            return default;
        }

<# } #>
<# if (Template == "3") { #>

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>2 b) {}

        [Constructor]
        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= CSharpPrimitive #> b) {}

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>2(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>4(<#= ClassName #> _)
        {
            return default;
        }

<# } #>
<# if (Template == "4") { #>

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c, <#= CSharpPrimitive #> d) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= ClassNameWithoutComponent #>2 c) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>2 b, <#= CSharpPrimitive #> c) {}

        [Constructor]
        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>3 b) {}

        [Constructor]
        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        [Constructor]
        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= ClassNameWithoutComponent #>2 b) {}

        [Constructor]
        public <#= ClassName #>(<#= ClassNameWithoutComponent #>3 a, <#= CSharpPrimitive #> b) {}


        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>2(<#= ClassName #> _)
        {
            return default;
        }

        [ImplicitCastInCompiler]
        public static explicit operator <#= ClassNameWithoutComponent #>3(<#= ClassName #> _)
        {
            return default;
        }

<# } #>

<# var targets = new string[] { ClassName, "int", "float", "SlFloat", "SlFloat2", "SlFloat3", "SlFloat4", "SlInt", "SlInt2", "SlInt3", "SlInt4" }; #>
<# foreach (var target in targets.Distinct() ) { #>
        public static <#= ClassName #> operator +(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator -(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator *(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator /(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator %(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

<# } #>

<# } else if (IsMatrix()) { #>
<# var plainArgs = string.Join(", ", Enumerable.Range(0, MatrixConstructorCount()).Select(w => $"{CSharpPrimitive} _{w}").ToList()); #>
<# var componentArgs = string.Join(", ", Enumerable.Range(0, BaseClassDuplication).Select(w => $"{BaseClassName} _{w}").ToList()); #>

        [Constructor]
        public <#= ClassName #>(<#= plainArgs #>) {}

        [Constructor]
        public <#= ClassName #>(<#= componentArgs #>) {}

<# if (!Template.EndsWith("x2")) { #>
        public static explicit operator <#= BaseClassName #>x2(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

<# if (!Template.EndsWith("x3")) { #>
        public static explicit operator <#= BaseClassName #>x3(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

<# if (!Template.EndsWith("x4")) { #>
        public static explicit operator <#= BaseClassName #>x4(<#= ClassName #> _)
        {
            return default;
        }

<# } #>
<# } #>
    }
}