﻿<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// <auto-generated />

using SharpX.Library.ShaderLab.Attributes;
using SharpX.Library.ShaderLab.Primitives.Abstractions;

namespace SharpX.Library.ShaderLab.Primitives
{
    [Component("<#= ComponentName #>")]
    [External]
    public partial class <#= ClassName #> <#= string.IsNullOrWhiteSpace(Inheritance) ? "" : (": " + Inheritance) #>
    {
        public <#= ClassName #>(<#= CSharpPrimitive #> a) {}

<# if (IsVector()) { #>
<# if (Template == "1") { #>
        public static implicit operator <#= CSharpPrimitive #>(<#= ClassName #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassName #>(<#= CSharpPrimitive #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassNameWithoutComponent #>2(<#= ClassName #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassNameWithoutComponent #>3(<#= ClassName #> _)
        {
            return default;
        }

        public static implicit operator <#= ClassNameWithoutComponent #>4(<#= ClassName #> _)
        {
            return default;
        }

<# if (CSharpPrimitive != "bool") { #>
        public static implicit operator bool(<#= ClassName #> _)
        {
            return default;
        }
<# } #>

        public static bool operator true(<#= ClassName #> _)
        {
            return default;
        }

        public static bool operator false(<#= ClassName #> _)
        {
            return default;
        }
<# } #>
<# if (Template == "2") { #>

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

<# } #>
<# if (Template == "3") { #>

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>2 b) {}

        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= CSharpPrimitive #> b) {}

<# } #>
<# if (Template == "4") { #>

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c, <#= CSharpPrimitive #> d) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= CSharpPrimitive #> b, <#= ClassNameWithoutComponent #>2 c) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>2 b, <#= CSharpPrimitive #> c) {}

        public <#= ClassName #>(<#= CSharpPrimitive #> a, <#= ClassNameWithoutComponent #>3 b) {}

        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= CSharpPrimitive #> b, <#= CSharpPrimitive #> c) {}

        public <#= ClassName #>(<#= ClassNameWithoutComponent #>2 a, <#= ClassNameWithoutComponent #>2 b) {}

        public <#= ClassName #>(<#= ClassNameWithoutComponent #>3 a, <#= CSharpPrimitive #> b) {}

<# } #>

<# var targets = new string[] { ClassName, "int", "float" }; #>
<# foreach (var target in targets ) { #>
        public static <#= ClassName #> operator +(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator -(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator *(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator /(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

        public static <#= ClassName #> operator %(<#= ClassName #> a, <#= target #> b)
        {
            return default;
        }

<# } #>

<# } #>
    }
}