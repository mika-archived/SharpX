#namespace SharpX.Library.ShaderLab.Functions
#class Builtin
#converter UpperCamelCase

function abort
{
    signatures
    {
        () => void
    }
}

function abs
{
    signatures
    {
        (x is scalar implements bool) => __input__
        (x is vector implements bool) => __input__
        (x is matrix implements bool) => __input__
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function acos
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function all
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is scalar implements bool
        (x is matrix implements float) => r is scalar implements bool
        (x is scalar implements int) => r is scalar implements bool
        (x is vector implements int) => r is scalar implements bool
        (x is matrix implements int) => r is scalar implements bool
        (x is scalar implements bool) => r is scalar implements bool
        (x is vector implements bool) => r is scalar implements bool
        (x is matrix implements bool) => r is scalar implements bool
    }
}

function any
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is scalar implements bool
        (x is matrix implements float) => r is scalar implements bool
        (x is scalar implements int) => r is scalar implements bool
        (x is vector implements int) => r is scalar implements bool
        (x is matrix implements int) => r is scalar implements bool
        (x is scalar implements bool) => r is scalar implements bool
        (x is vector implements bool) => r is scalar implements bool
        (x is matrix implements bool) => r is scalar implements bool
    }
}

function asfloat
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
        (x is scalar implements int) => __input__
        (x is vector implements int) => __input__
        (x is matrix implements int) => __input__
        (x is scalar implements bool) => __input__
        (x is vector implements bool) => __input__
        (x is matrix implements bool) => __input__
    }
}

function asin
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function asint
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements int
        (x is vector implements float) => r is vector implements int
        (x is matrix implements float) => r is matrix implements int
        (x is scalar implements uint) => r is scalar implements int
        (x is vector implements uint) => r is vector implements int
        (x is matrix implements uint) => r is matrix implements int

    }
}

function asuint
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements uint
        (x is vector implements float) => r is vector implements uint
        (x is matrix implements float) => r is matrix implements uint
        (x is scalar implements int) => r is scalar implements uint
        (x is vector implements int) => r is vector implements uint
        (x is matrix implements int) => r is matrix implements uint
    }
}

function atan
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function atan2
{
    signatures
    {
        (y is scalar implements float, x is scalar implements float) => __input__
        (y is vector implements float, x is vector implements float) => __input__
        (y is matrix implements float, x is matrix implements float) => __input__
    }
}

function ceil
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function clamp
{
    signatures
    {
        (x is scalar implements float, min is scalar implements float, max is scalar implements float) => __input__
        (x is vector implements float, min is vector implements float, max is vector implements float) => __input__
        (x is matrix implements float, min is matrix implements float, max is matrix implements float) => __input__
        (x is scalar implements int, min is scalar implements int, max is scalar implements int) => __input__
        (x is vector implements int, min is vector implements int, max is vector implements int) => __input__
        (x is matrix implements int, min is matrix implements int, max is matrix implements int) => __input__
    }
}

function clip
{
    signatures
    {
        (x is scalar implements float) => void
        (x is vector implements float) => void
        (x is matrix implements float) => void
    }
}

function cos
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function cosh
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function cross
{
    signatures
    {
        (x is vector implements float has 3 elements, y is vector implements float has 3 elements) => __input__
    }
}

function ddx
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddx_coarse
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddx_fine
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy_coarse
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy_fine
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function degrees
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function determinant
{
    signatures
    {
        (x is matrix implements float has TxT elements) => r is scalar implements float
    }
}