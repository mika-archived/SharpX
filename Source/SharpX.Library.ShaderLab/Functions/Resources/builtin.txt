// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions

#namespace SharpX.Library.ShaderLab.Functions
#class Builtin
#converter UpperCamelCase

function abort
{
    signatures
    {
        () => void
    }
}

function abs
{
    signatures
    {
        (x is scalar implements bool) => __input__
        (x is vector implements bool) => __input__
        (x is matrix implements bool) => __input__
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function acos
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function all
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is scalar implements bool
        (x is matrix implements float) => r is scalar implements bool
        (x is scalar implements int) => r is scalar implements bool
        (x is vector implements int) => r is scalar implements bool
        (x is matrix implements int) => r is scalar implements bool
        (x is scalar implements bool) => r is scalar implements bool
        (x is vector implements bool) => r is scalar implements bool
        (x is matrix implements bool) => r is scalar implements bool
    }
}

function any
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is scalar implements bool
        (x is matrix implements float) => r is scalar implements bool
        (x is scalar implements int) => r is scalar implements bool
        (x is vector implements int) => r is scalar implements bool
        (x is matrix implements int) => r is scalar implements bool
        (x is scalar implements bool) => r is scalar implements bool
        (x is vector implements bool) => r is scalar implements bool
        (x is matrix implements bool) => r is scalar implements bool
    }
}

function asfloat
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
        (x is scalar implements int) => __input__
        (x is vector implements int) => __input__
        (x is matrix implements int) => __input__
        (x is scalar implements bool) => __input__
        (x is vector implements bool) => __input__
        (x is matrix implements bool) => __input__
    }
}

function asin
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function asint
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements int
        (x is vector implements float) => r is vector implements int
        (x is matrix implements float) => r is matrix implements int
        (x is scalar implements uint) => r is scalar implements int
        (x is vector implements uint) => r is vector implements int
        (x is matrix implements uint) => r is matrix implements int

    }
}

function asuint
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements uint
        (x is vector implements float) => r is vector implements uint
        (x is matrix implements float) => r is matrix implements uint
        (x is scalar implements int) => r is scalar implements uint
        (x is vector implements int) => r is vector implements uint
        (x is matrix implements int) => r is matrix implements uint
    }
}

function atan
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function atan2
{
    signatures
    {
        (y is scalar implements float, x is scalar implements float) => __input__
        (y is vector implements float, x is vector implements float) => __input__
        (y is matrix implements float, x is matrix implements float) => __input__
    }
}

function ceil
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function clamp
{
    signatures
    {
        (x is scalar implements float, min is scalar implements float, max is scalar implements float) => __input__
        (x is vector implements float, min is vector implements float, max is vector implements float) => __input__
        (x is matrix implements float, min is matrix implements float, max is matrix implements float) => __input__
        (x is scalar implements int, min is scalar implements int, max is scalar implements int) => __input__
        (x is vector implements int, min is vector implements int, max is vector implements int) => __input__
        (x is matrix implements int, min is matrix implements int, max is matrix implements int) => __input__
    }
}

function clip
{
    signatures
    {
        (x is scalar implements float) => void
        (x is vector implements float) => void
        (x is matrix implements float) => void
    }
}

function cos
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function cosh
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function cross
{
    signatures
    {
        (x is vector implements float has 3 elements, y is vector implements float has 3 elements) => __input__
    }
}

function ddx
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddx_coarse
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddx_fine
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy_coarse
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function ddy_fine
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function degrees
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function determinant
{
    signatures
    {
        (x is matrix implements float has TxT elements) => r is scalar implements float
    }
}

function distance
{
    signatures
    {
        (x is vector implements float, y is vector implements float) => r is scalar implements float
    }
}

function dot
{
    signatures
    {
        (x is vector implements float, y is vector implements float) => r is scalar implements float
        (x is vector implements int, y is vector implements int) => r is scalar implements int
    }
}

function exp
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function exp2
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function faceforward
{
    signatures
    {
        (n is vector implements float, i is vector implements float, ng is vector implements float) => __input__
    }
}

function firstbithigh
{
    signatures
    {
        (value is scalar implements int) => __input__
        (value is vector implements int) => __input__
        (value is scalar implements uint) => __input__
        (value is vector implements uint) => __input__
    }
}

function firstbitlow
{
    signatures
    {
        (value is scalar implements uint) => __input__
        (value is vector implements uint) => __input__
    }
}

function floor
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function fmod
{
    signatures
    {
        (x is scalar implements float, y is scalar implements float) => __input__
        (x is vector implements float, y is vector implements float) => __input__
        (x is matrix implements float, y is matrix implements float) => __input__
    }
}

function frac
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function frexp
{
    signatures
    {
        (x is scalar implements float, [out] exp is scalar implements float) => __input__
        (x is vector implements float, [out] exp is vector implements float) => __input__
        (x is matrix implements float, [out] exp is matrix implements float) => __input__
    }
}

function fwidth
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function isfinite
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is vector implements bool
        (x is matrix implements float) => r is matrix implements bool
    }
}

function isinf
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is vector implements bool
        (x is matrix implements float) => r is matrix implements bool
    }
}

function isnan
{
    signatures
    {
        (x is scalar implements float) => r is scalar implements bool
        (x is vector implements float) => r is vector implements bool
        (x is matrix implements float) => r is matrix implements bool
    }
}

function ldexp
{
    signatures
    {
        (x is scalar implements float, exp is scalar implements float) => r is scalar implements float
        (x is vector implements float, exp is vector implements float) => r is vector implements float
        (x is matrix implements float, exp is matrix implements float) => r is matrix implements float
    }
}

function length
{
    signatures
    {
        (x is vector implements float) => r is scalar implements float
    }
}

function lerp
{
    signatures
    {
        (x is scalar implements float, y is scalar implements float, s is scalar implements float) => __input__
        (x is vector implements float, y is vector implements float, s is vector implements float) => __input__
        (x is matrix implements float, y is matrix implements float, s is matrix implements float) => __input__
    }
}

function lit
{
    signatures
    {
        (n_dot_l is scalar implements float, n_dot_h is scalar implements float, m is scalar implements float) => r is vector implements float has 4 elements
    }
}

function log
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function log10
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function log2
{
    signatures
    {
        (x is scalar implements float) => __input__
        (x is vector implements float) => __input__
        (x is matrix implements float) => __input__
    }
}

function max
{
    signatures
    {
        (x is scalar implements float, y is scalar implements float) => __input__
        (x is vector implements float, y is vector implements float) => __input__
        (x is matrix implements float, y is matrix implements float) => __input__
        (x is scalar implements int, y is scalar implements int) => __input__
        (x is vector implements int, y is vector implements int) => __input__
        (x is matrix implements int, y is matrix implements int) => __input__
    }
}

function min
{
    signatures
    {
        (x is scalar implements float, y is scalar implements float) => __input__
        (x is vector implements float, y is vector implements float) => __input__
        (x is matrix implements float, y is matrix implements float) => __input__
        (x is scalar implements int, y is scalar implements int) => __input__
        (x is vector implements int, y is vector implements int) => __input__
        (x is matrix implements int, y is matrix implements int) => __input__
    }
}

function modf
{
    signatures
    {
        (x is scalar implements float, [out] ip is scalar implements float) => __input__
        (x is vector implements float, [out] ip is vector implements float) => __input__
        (x is matrix implements float, [out] ip is matrix implements float) => __input__
        (x is scalar implements int, [out] ip is scalar implements int) => __input__
        (x is vector implements int, [out] ip is vector implements int) => __input__
        (x is matrix implements int, [out] ip is matrix implements int) => __input__
    }
}

// mul is declared in Builtin.cs directly using Generics
// function mul
// {
//     signatures
//     {
//     }
// }

function noise
{
    signatures
    {
        (x is vector implements float) => same(x)
    }
}

function normalize
{
    signatures
    {
        (x is vector implements float) => same(x)
    }
}

function pow
{
    signatures
    {
        (x is scalar implements float, y is scalar implements float) => same(x)
        (x is vector implements float, y is vector implements float) => same(x)
        (x is matrix implements float, y is matrix implements float) => same(x)
    }
}

function radians
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function rcp
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function reflect
{
    signatures
    {
        (i is vector implements float, n is vector implements float) => same(i)
    }
}

function refract
{
    signatures
    {
        (i is vector implements float, n is vector implements float, q is scalar implements float) => same(i)
    }
}

function reversebits
{
    signatures
    {
        (value is scalar implements uint) => same(value)
        (value is vector implements uint) => same(value)
    }
}

function round
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function rsqrt
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function saturate
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function sign
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
        (x is scalar implements int) => same(x)
        (x is vector implements int) => same(x)
        (x is matrix implements int) => same(x)
    }
}

function sin
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function sincos
{
    signatures
    {
        (x is scalar implements float, [out] s is scalar implements float, [out] c is scalar implements float) => void
        (x is vector implements float, [out] s is vector implements float, [out] c is vector implements float) => void
        (x is matrix implements float, [out] s is matrix implements float, [out] c is matrix implements float) => void
    }
}

function sinh
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function smoothstep
{
    signatures
    {
        (x is scalar implements float, min is scalar implements float, max is scalar implements float) => same(x)
        (x is vector implements float, min is vector implements float, max is vector implements float) => same(x)
        (x is matrix implements float, min is matrix implements float, max is matrix implements float) => same(x)
    }
}

function sqrt
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function step
{
    signatures
    {
        (y is scalar implements float, x is scalar implements float) => same(y)
        (y is vector implements float, x is vector implements float) => same(y)
        (y is matrix implements float, x is matrix implements float) => same(y)
    }
}

function tan
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function tanh
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}

function tex1D
{
    signatures
    {
        (x is object implements sampler1D, t is scalar implements float) => r is vector implements float has 4 elements
        (x is object implements sampler1D, t is scalar implements float, ddx is scalar implements float, ddy is scalar implements float) => r is vector implements float has 4 elements
    }
}

function tex1Dbias
{
    signatures
    {
        (s is object implements sampler1D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex1Dgrad
{
    signatures
    {
        (s is object implements sampler1D, t is scalar implements float, ddx is scalar implements float, ddy is scalar implements float) => r is vector implements float has 4 elements
    }
}

function tex1Dlod
{
    signatures
    {
        (s is object implements sampler1D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex1Dproj
{
    signatures
    {
        (s is object implements sampler1D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex2D
{
    signatures
    {
        (s is object implements sampler2D, t is vector implements float has 2 elements) => r is vector implements float has 4 elements
        (s is object implements sampler2D, t is vector implements float has 2 elements, ddx is vector implements float has 2 elements, ddy is vector implements float has 2 elements) => r is vector implements float has 4 elements
    }
}

function tex2Dbias
{
    signatures
    {
        (s is object implements sampler2D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex2Dgrad
{
    signatures
    {
        (s is object implements sampler2D, t is vector implements float has 2 elements, ddx is vector implements float has 2 elements, ddy is vector implements float has 2 elements) => r is vector implements float has 4 elements
    }
}

function tex2Dlod
{
    signatures
    {
        (s is object implements sampler2D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex2Dproj
{
    signatures
    {
        (s is object implements sampler2D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex3D
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 3 elements) => r is vector implements float has 4 elements
        (s is object implements sampler3D, t is vector implements float has 3 elements, ddx is vector implements float has 3 elements, ddy is vector implements float has 3 elements) => r is vector implements float has 4 elements
    }
}

function tex3Dbias
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex3Dgrad
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 3 elements, ddx is vector implements float has 3 elements, ddy is vector implements float has 3 elements) => r is vector implements float has 4 elements
    }
}

function tex3Dlod
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function tex3Dproj
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function texCUBE
{
    signatures
    {
        (s is object implements samplerCUBE, t is vector implements float has 3 elements) => r is vector implements float has 4 elements
        (s is object implements samplerCUBE, t is vector implements float has 3 elements, ddx is vector implements float has 3 elements, ddy is vector implements float has 3 elements) => r is vector implements float has 4 elements
    }
}

function texCUBEbias
{
    signatures
    {
        (s is object implements samplerCUBE, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function texCUBEgrad
{
    signatures
    {
        (s is object implements samplerCUBE, t is vector implements float has 3 elements, ddx is vector implements float has 3 elements, ddy is vector implements float has 3 elements) => r is vector implements float has 4 elements
    }
}

function texCUBElod
{
    signatures
    {
        (s is object implements samplerCUBE, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

function texCUBEproj
{
    signatures
    {
        (s is object implements sampler3D, t is vector implements float has 4 elements) => r is vector implements float has 4 elements
    }
}

// https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-transpose

function trunc
{
    signatures
    {
        (x is scalar implements float) => same(x)
        (x is vector implements float) => same(x)
        (x is matrix implements float) => same(x)
    }
}